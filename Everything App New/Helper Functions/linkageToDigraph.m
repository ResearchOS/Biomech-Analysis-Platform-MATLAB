function [G] = linkageToDigraph(types, links)

%% PURPOSE: CONVERT THE LINKAGE MATRIX TO A DIGRAPH (FUNCTIONS ONLY) SO THAT I CAN CHECK DEPENDENCIES.
% types: Indicates what types of objects to return in the digraph.
    % 'PR': Returns a digraph where the nodes are processing functions, and
    % the edges are the variables.
    % 'ALL': Returns all objects as a node, from variables to projects.
        % Allows for checking which objects are in which containers.

% Digraph fields:
    % Nodes:
        % Name: The UUID of the node.
        % PrettyName: The human-readable name of the node (non-unique).

types = upper(types);

G = [];
edgeNames = {};
s = {};
t = {};

if exist('links','var')~=1
    links = loadLinks();
end

% Remove everything except for functions and variables.
if isequal(types,'PR')
    abbrevs1 = {'PR','LG'};
    abbrevs2 = 'VR';    
elseif isequal(types,'ALL')
    abbrevs = '';
end

%% NOTE: NEED TO CONSIDER WHEN 2+ VARIABLES BOTH ARE OUTPUTS OF SAME FUNCTION, AND BOTH/ALL ARE INPUTS TO ANOTHER FUNCTION!
% Bonus: This should also work for variables generated by the logsheet!

% All row numbers that a processing function with an output variable.
varOutRowIdxNums = find(contains(links(:,1),abbrevs1) & contains(links(:,2),abbrevs2)==1);

for i=1:length(varOutRowIdxNums)
    varUUID = links(varOutRowIdxNums(i),2); % The UUID of the output variable.

    varInRowIdx = ismember(links(:,1),varUUID); % The row numbers where the output variable is an input variable.

    if ~any(varInRowIdx)
        continue;
    end

    numReps = sum(varInRowIdx);
    s = [s; repmat(links(varOutRowIdxNums(i),1), numReps, 1)]; % The UUID of the PR that the variable is an output of.
    t = [t; links(varInRowIdx,2)]; % The UUID of the PR that the variable is an input to.

    edgeNames = [edgeNames; repmat(varUUID, numReps, 1)];

end

prettyEdgeNames = getName(edgeNames);
edgeTable = table([s t],getName([s t]),edgeNames,prettyEdgeNames,'VariableNames',{'EndNodes','PrettyEndNodes','Name','PrettyName'});
G = digraph(edgeTable);
G.Nodes.PrettyName = getName(G.Nodes.Name);